#####################################################################
# 	Macros
#####################################################################
[force_move]
# Enable commands that force potentially unsafe movement
enable_force_move: True

[gcode_macro UNSAFE_RAISE_GANTRY]
description: Lower the bed 10mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z10 F600
  G4 P2000


[homing_override]
  axes: xyz
  gcode:
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    STATUS_HOMING
    UNSAFE_RAISE_GANTRY

    {% if home_all or 'X' in params %}
      _HOME_X
    {% endif %}
  
    {% if home_all or 'Y' in params %}
      _HOME_Y
    {% endif %}
    
    {% if home_all or 'Z' in params %}
      G90
      G1 X147 Y128 F6000
      G28 Z
      G1 Z15 F1500
      STATUS_READY
    {% endif %}

[gcode_macro _HOME_X]
gcode:
    # Home
    G28 X
    # Move away
    G91
    G4 P1000
    G1 X10 F6000

[gcode_macro _HOME_Y]
gcode:
    # Home
    G28 Y
    # Move away
    G91
    G1 Y10 F6000


[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Heat bed for probing
    STATUS_HEATING
    M190 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Home the printer
    STATUS_HOMING
    G28

    # If you are generating a new bed mesh:
    STATUS_MESHING
    BED_MESH_CALIBRATE ADAPTIVE=1
    ## NOTE:    The adaptive meshing feature requires exclude_object     ##
    ##      and may require 'Label Objects' to be enabled in the slicer  ##
    ##           To mesh without it just use BED_MESH_CALIBRATE          ##

    # If you are loading an existing mesh:
    #BED_MESH_PROFILE LOAD=default

    # Move the nozzle near the bed
    G1 Z5 F3000
    # Set and wait for nozzle to reach printing 
    STATUS_HEATING
    M109 S{EXTRUDER_TEMP}
    # Start printing!
    STATUS_PRINTING
    LINE_PURGE


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear
    M117 Finished!
    STATUS_READY

[gcode_macro LINE_PURGE]
#   Use Line_Purge to draw purge line
gcode:

    G1 X3.5 Y50 Z0.3 F5000.0 		; Move to start position
    G1 X3.5 Y200.0 Z0.3 F1500.0 E15 	; Draw the first line
    G1 X4.5 Y200.0 Z0.3 F5000.0 	; Move to side a little
    G1 X4.5 Y50 Z0.3 F1500.0 E30 	; Draw the second line
    G92 E0 ; Reset Extruder
    M82 ; set absolute E
    G1 Z2.0 F3000 			; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y50 Z0.3 F5000.0 		; Move over to prevent blob squish

# Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 147   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 295   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 2.0   ; the value to retract while PAUSE
variable_cancel_retract   : 4.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 2.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 147  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 295  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode: